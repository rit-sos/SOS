SOS Team Experience

The SOS project as a whole was not something that anyone designed up front.
Instead, We set up a repository and each group member essentially went off
and worked mostly independently on his projects. When we ran into trouble,
we helped each other with research and debugging, but generally not with
design. The planning phase was definitely something that should have been
approached better and with more care.

Another consequence of the lack of planning was a similar lack of a useful
end goal. Because the projects were largely independent, the demoable parts
of it are similarly independent and fragmented.

One difficulty that we ran into was with integration of large changes. This
is not a surprising thing to run into problems with, but it was more
pronounced than usual with this project. The biggest difficult thing to
integrate with was virtual memory. The virtual memory system was fairly
complicated and difficult to debug, with many interesting and hard to find
bugs and details. One particularly frustrating bug involved not invalidating
TLB entries when the kernel page directory changed, causing apparently
harmless writes into mapped pages to inexplicably appear in the wrong places.
Another bug was accidentally marking as free the entirety of the kernel's
memory in some circumstances.

Virtual memory in general caused a lot of headache for development. Between
that and the privilege separation changes, large parts of the core of the
baseline system had to be rewritten and replaced, creating plenty of new
surface area for strange bugs.

Overall, though, for as much of a mess as a lot of the code was, the
privilege separation and memory protection system worked out well. Having
simple things like segmentation faults and general protection faults safely
killing the offending process helps a lot.

As far as things that we would do differently next time, one thing that
would make sense to change would be the kernel's use of virtual memory.
Most operating systems keep kernel data mapped into every process and run
kernel code in the user's address space, rather than doing an expensive
address space change on each and every interrupt. There are also some memory
management functions that evolved organically over time that could do with
some rewriting and cleaning up. Also, when rewriting the ISR context save
and restore code for ring switching, floating point context support should
absolutely have been added -- it would have been, but nobody though of it at
the time. A really nice feature to have that there probably would not have
been time for under any circumstances would be a pre-emptible kernel so that
handling a time-consuming syscall would not prevent other system functions
(like the clock ISR) from running.

If we had more time, there are quite a few features that would be very
interesting to implement now that we have the groundwork established. Loading
programs to and from disk, file descriptor compliance for the windowing system,
window focus and redirectable console input, and IO redirection would all be
simple to implement from where we are now. To facilitate this, an actual file
system and redesined fopen and fclose would be implemented, possibly in the form
of a virtual file system. This would drastically increase the uitility of our
system for the user.

Disk interaction speed increased a lot with the implementation of interrupt
based transfers,but the system still uses PIO to actually transfer the data
during the interrupt -- taking up a lot of cpu time for very simple
interactions. Adding DMA support to the driver and file descriptors would
improve transfer speeds and reduce CPU overhead, and would be the next logical
step in the development of the ATA driver.

Thankfully, the file descriptor system proved to be robust enough to expand to
all of the IO tasks given to it, but there are a few design changes that would
make it a bit more expandable. A good improvement to the system now that
virtual and shared memory have been implemented would be replacing the global
file descriptor table to a per-process based system, giving each newly spawned
process the file descriptor table of their parent and enabling interprocess
pipes. Currently the FDs are a bit too specialized, and don't allow user
processes to read from the output buffer of a file descriptor.

One design decision we ended up regretting was not making a PCI enumeration
subsystem. In retrospect, it would have been a lot more efficient to enumerate
the PCI bus once, and install connect callbacks for each device class supported.
Currently we enumerate the PCI bus once per device module, which is managable
now, but wouldn't scale very well as more features are added.
